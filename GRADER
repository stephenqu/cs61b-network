                                     GRADER

Name of student running submit: Brian Pugh
Login of student running submit: cs61b-of

Second team member's name: Allen Li
Second team member's login: cs61b-wl

Third team member's name (if any): Stephen Qu
Third team member's login: cs61b-fn

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?
Yes

Have you tested your program on the machines in the Soda CS 61B lab?
Yes, via ssh.

Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor?
Yes, yes, no. Default number of search levels is 2.

Describe your board evaluation function in some detail.
First it checks for valid networks, returning 1 if white has won and -1 if black has won. Then it counts the number of connections that each side has, then calculates the difference over the sum, multiplied by .99. That way it returns a double on a spectrum from -.99 (great for black) to .99 (great for white).


Does your MachinePlayer use any special method of choosing the first few moves?
Nope.

Is there anything else the graders should know to help them read your project?
I hope not. We tried to keep it pretty readable. We used the DList implementation with InvalidNodeExceptions a lot.


Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces with be worth about 10% of your
grade.

Classes:
Board
Player
  MachinePlayer
Move
Piece
list/DList
list/DListNode
list/DListIterator

Modules:
  -list package
  1. DList Module
     I copied most of the code from our homework, but I also implemented a doubly linked list DList Iterator so we were able to use for each loops with our DLists.

  -BOARD CLASS
  1. Valid Moves Module in Board Class (Brian Pugh)
     Module for the purpose of determining a valid move.
     public boolean validMove(Move m)
     Decides if the Move m is a valid move on this board. I used enough helper methods that it's pretty readable so the best way to explain it is to read it.

     public Move[] validMoves(Move m)
     Generates a list of all valid moves without calling validMove.


  2. Winning Network Module (Allen Li)
     Module for the purpose of determining a winner.

     public int winner()
     Returns the color of the winner or -1 if there is not winner yet. Tests
     this by looking for winning networks.
     (Lots of private methods, classes, etc. behind this)
     THESE PRIVATE METHODS ARE NOT DOCUMENTED IN THE SOURCE CODE.

     private DList findWinningNetworks()
     Returns a doubly-linked list of any networks.

     private Network findNetwork(Piece)
     Finds a network (if it exists) from Piece.

     private Network findNetwork(Piece[])
     Finds a network (if it exists) that starts with the ordered Piece[].

     private boolean isInEndZone(Piece)
     Determines if a Piece is in the end zone.

     private boolean isInFarEndZoneIfAlreadyInEndZone(Piece)
     Determines if they are in the bottom or top end zone.

     private static boolean containsPiece(Piece[], Piece)
     Returns whether the Piece[] contains Piece.

     private static Piece[] appendToPieceArray(Piece[], Piece)
     Returns a Piece array with Piece appended to Piece[].

     private static boolean inRayPath(Piece[], Piece)
     Returns whether the last two Pieces in Piece[] and Piece are colinear.

     private class Network
     Internal representation of a Network.

  3. General Board Class Module (Brian Pugh)
     Module to support represenations of Boards

     public void doMove(Move m)
     Executes the move M if it is valid, then updates numMoves and nextPlayer.

     public int getNextPlayer()
     Returns the color of the player who will go next.

     public Piece getPiece(int x, int y)
     Gets the piece at those coordinates.

     public int getNumMoves();
     Returns the number of moves elapsed, for use in the chooseMove() method of MachinePlayer and for checking move validity.

     public Piece[] getSurroundings(Piece p)
     Returns and 8 element array of the surroundings of p.

     public int getDimension()
     Returns the side length of the Board (always 8)

     public int otherPlayer()
     Returns the color of the other player (i.e. WHITE --> BLACK)

     public boolean addPiece(Piece)
     Adds a piece, returns if successful.

     public boolean removePiece(Piece)
     Removes a piece, returns if successful.

     Board Evaluation Module in Board Class (Brian Pugh)
     public double boardEval(Board b)
     Explained above.


  4. toString Module (Allen Li)
     Module to display a text representation of Board.
     public String toString();
     Not hard. For debugging.


  -PIECE CLASS
  1. Piece Representation(Allen Li)
    Module to support internal representations inside Board.
     Basic internal representation of a Piece.
     Write a constructor and getters and setters for X, Y, and the color. Moves will be processed by changing Position fields, not references. (Unless we find some security problems with this way)

  -MACHINEPLAYER CLASS

  1. Choose Move Module(Stephen Qu)
     public Move chooseMove()
     This is a minimax game tree method with alpha-beta pruning that decides what move to take. It contains an internal recursive helper method.

     class Best
     Class that stores a move and the resulting score of the board as a result of making that move. 


  2. Moving Module (Brian Pugh and Stephen Qu)
     public boolean doMove(Move m)

     public void reverseMove(Move m)
     used for minimax
     